{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","flag","handleClick","refresh","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b55456d5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0,this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    /* To refresh at any point in the game */\n    refresh() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        for (let i = 0; i <= 8; ++i) {\n            squares[i] = null;\n        }\n        this.setState({\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner : ' + winner;\n        } else {\n            /* Functionality for detecting draw */\n            let flag = 1;\n            for (let i = 0; i <= 8; ++i) {\n                if ( !current.squares[i]) {\n                    flag = 0;\n                }\n            }\n            if ( flag === 1) {\n                status = 'Draw'\n            } else {\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            }\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <div className=\"next-player\">{status}</div>\n                    <Board\n                        squares = {current.squares}\n                        onClick = {(i) => this.handleClick(i)}\n                    />\n                    <button\n                        className=\"again\"\n                        onClick = {() => this.refresh(Board)}\n                    >Refresh</button>\n                </div>\n                <div className=\"game-info\">\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}